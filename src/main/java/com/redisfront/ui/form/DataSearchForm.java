package com.redisfront.ui.form;

import cn.hutool.core.lang.Assert;
import com.formdev.flatlaf.FlatClientProperties;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import com.formdev.flatlaf.icons.FlatSearchIcon;
import com.redisfront.constant.NodeTypeEnum;
import com.redisfront.model.ConnectInfo;
import com.redisfront.model.TreeNodeInfo;
import com.redisfront.service.RedisService;
import com.redisfront.util.MsgUtil;
import com.redisfront.util.TreeUtil;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.util.Set;
import java.util.function.Consumer;
import java.util.stream.Collectors;

public class DataSearchForm {
    private JPanel contentPanel;
    private JTree keyTree;
    private JComboBox comboBox1;
    private JTextField searchTextField;
    private JComboBox databaseComboBox;
    private JButton addBtn;
    private JPanel treePanel;
    private JButton refreshBtn;

    private Consumer<TreeNodeInfo> nodeClickCallback;

    private ConnectInfo connectInfo;

    public JPanel getContentPanel() {
        return contentPanel;
    }

    public static DataSearchForm newInstance() {
        return new DataSearchForm();
    }

    public DataSearchForm() {
    }

    public DataSearchForm(Consumer<TreeNodeInfo> nodeClickCallback, ConnectInfo connectInfo) {
        this.nodeClickCallback = nodeClickCallback;
        this.connectInfo = connectInfo;
    }

    public DataSearchForm setNodeClickCallback(Consumer<TreeNodeInfo> nodeClickCallback) {
        this.nodeClickCallback = nodeClickCallback;
        return this;
    }

    public DataSearchForm setConnectInfo(ConnectInfo connectInfo) {
        this.connectInfo = connectInfo;
        return this;
    }


    public void init() {
        Assert.isNull(connectInfo, () -> new RuntimeException("connectInfo 不能为空"));
        Assert.isNull(nodeClickCallback, () -> new RuntimeException("nodeClickCallback 不能为空"));
        try (var jedis = RedisService.service.getJedis(this.connectInfo)) {
            Set<String> keySet = jedis.keys("*");
            TreeUtil.toTreeNodeInfoList(keySet, ":");

        } catch (Exception e) {
            MsgUtil.showErrorDialog("Redis Error", e);
        }
    }

    Set<TreeNodeInfo> strToTree(Set<String> keySet, String name) {
        return keySet
                .stream()
                .parallel()
                .filter(s -> s.contains(name))
                .map(s -> s.split(name))
                .map(s -> new TreeNodeInfo(s[0], s[0]))
                .peek(treeNodeInfo -> strToTree(keySet, treeNodeInfo.key().concat(":")).forEach(treeNodeInfo::add))
                .collect(Collectors.toSet());
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPanel.setLayout(new BorderLayout(0, 0));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        contentPanel.add(panel1, BorderLayout.NORTH);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new BorderLayout(0, 0));
        panel1.add(panel2, BorderLayout.NORTH);
        comboBox1 = new JComboBox();
        panel2.add(comboBox1, BorderLayout.WEST);
        addBtn.setHorizontalAlignment(0);
        addBtn.setHorizontalTextPosition(11);
        addBtn.setText("新增");
        panel2.add(addBtn, BorderLayout.CENTER);
        refreshBtn.setText("");
        panel2.add(refreshBtn, BorderLayout.EAST);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new BorderLayout(0, 0));
        panel1.add(panel3, BorderLayout.SOUTH);
        panel3.add(searchTextField, BorderLayout.CENTER);
        treePanel.setLayout(new BorderLayout(0, 0));
        contentPanel.add(treePanel, BorderLayout.CENTER);
        treePanel.add(keyTree, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }

    private void createUIComponents() {
        contentPanel = new JPanel();
        contentPanel.setLayout(new BorderLayout());
        contentPanel.setBorder(new EmptyBorder(5, 5, 5, 0));
        addBtn = new JButton();
        refreshBtn = new JButton();
        refreshBtn.setIcon(new FlatSVGIcon("icons/refresh.svg"));
        databaseComboBox = new JComboBox();
        treePanel = new JPanel();
        treePanel.setBorder(new EmptyBorder(3, 2, 2, 2));
        searchTextField = new JTextField();
        searchTextField.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Search keys...");
        searchTextField.putClientProperty(FlatClientProperties.TEXT_FIELD_TRAILING_COMPONENT, new JButton(new FlatSearchIcon()));
        searchTextField.putClientProperty(FlatClientProperties.TEXT_FIELD_SHOW_CLEAR_BUTTON, true);

        keyTree = new JTree();

        keyTree.setBorder(new EmptyBorder(5, 5, 5, 5));

    }
}
